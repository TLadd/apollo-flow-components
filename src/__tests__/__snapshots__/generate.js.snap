// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate generates expected output for flow: Generates a file with DeleteRecord mutation 1`] = `
"/* Generated using apollo-typed-components */
// @flow
import * as React from \\"react\\";
import { Mutation } from \\"react-apollo\\";
import {
  DeleteRecord
} from \\"./queries.graphql\\"
import type {
  DeleteRecord as DeleteRecordType,
  DeleteRecordVariables
} from \\"types\\";

class DeleteRecordMutationClass extends Mutation<DeleteRecordType, DeleteRecordVariables> {};

export const DeleteRecordMutation = (props: $Diff<React.ElementConfig<typeof DeleteRecordMutationClass>, { mutation: any }>) => <DeleteRecordMutationClass mutation={DeleteRecord} {...props} />;"
`;

exports[`generate generates expected output for flow: Generates a file with GetList query and DeleteItem mutation 1`] = `
"/* Generated using apollo-typed-components */
// @flow
import * as React from \\"react\\";
import { Query, Mutation, Subscription } from \\"react-apollo\\";
import {
  GetList,
  DeleteItem,
  OnDeleteItem
} from \\"./queries.graphql\\"
import type {
  GetList as GetListType,
  GetListVariables,
  DeleteItem as DeleteItemType,
  DeleteItemVariables,
  OnDeleteItem as OnDeleteItemType,
  OnDeleteItemVariables
} from \\"types\\";

class GetListQueryClass extends Query<GetListType, GetListVariables> {};
class DeleteItemMutationClass extends Mutation<DeleteItemType, DeleteItemVariables> {};
class OnDeleteItemSubscriptionClass extends Subscription<OnDeleteItemType, OnDeleteItemVariables> {};

export const GetListQuery = (props: $Diff<React.ElementConfig<typeof GetListQueryClass>, { query: any }>) => <GetListQueryClass query={GetList} {...props} />;
export const DeleteItemMutation = (props: $Diff<React.ElementConfig<typeof DeleteItemMutationClass>, { mutation: any }>) => <DeleteItemMutationClass mutation={DeleteItem} {...props} />;
export const OnDeleteItemSubscription = (props: $Diff<React.ElementConfig<typeof OnDeleteItemSubscriptionClass>, { subscription: any }>) => <OnDeleteItemSubscriptionClass subscription={OnDeleteItem} {...props} />;"
`;

exports[`generate generates expected output for flow: Generates a file with GetRecord query and UpdateRecord mutation 1`] = `
"/* Generated using apollo-typed-components */
// @flow
import * as React from \\"react\\";
import { Query, Mutation, Subscription } from \\"react-apollo\\";
import {
  GetRecord,
  UpdateRecord,
  OnUpdatedRecord
} from \\"./queries.graphql\\"
import type {
  GetRecord as GetRecordType,
  GetRecordVariables,
  UpdateRecord as UpdateRecordType,
  UpdateRecordVariables,
  OnUpdatedRecord as OnUpdatedRecordType,
  OnUpdatedRecordVariables
} from \\"types\\";

class GetRecordQueryClass extends Query<GetRecordType, GetRecordVariables> {};
class UpdateRecordMutationClass extends Mutation<UpdateRecordType, UpdateRecordVariables> {};
class OnUpdatedRecordSubscriptionClass extends Subscription<OnUpdatedRecordType, OnUpdatedRecordVariables> {};

export const GetRecordQuery = (props: $Diff<React.ElementConfig<typeof GetRecordQueryClass>, { query: any }>) => <GetRecordQueryClass query={GetRecord} {...props} />;
export const UpdateRecordMutation = (props: $Diff<React.ElementConfig<typeof UpdateRecordMutationClass>, { mutation: any }>) => <UpdateRecordMutationClass mutation={UpdateRecord} {...props} />;
export const OnUpdatedRecordSubscription = (props: $Diff<React.ElementConfig<typeof OnUpdatedRecordSubscriptionClass>, { subscription: any }>) => <OnUpdatedRecordSubscriptionClass subscription={OnUpdatedRecord} {...props} />;"
`;

exports[`generate generates expected output for flow: Generates a file with GetViewer query 1`] = `
"/* Generated using apollo-typed-components */
// @flow
import * as React from \\"react\\";
import { Query } from \\"react-apollo\\";
import {
  GetViewer
} from \\"./queries.graphql\\"
import type {
  GetViewer as GetViewerType
} from \\"types\\";

class GetViewerQueryClass extends Query<GetViewerType, {}> {};

export const GetViewerQuery = (props: $Diff<React.ElementConfig<typeof GetViewerQueryClass>, { query: any }>) => <GetViewerQueryClass query={GetViewer} {...props} />;"
`;

exports[`generate generates expected output for typescript: Generates a file with DeleteRecord mutation 1`] = `
"/* Generated using apollo-typed-components */
import * as React from \\"react\\";
import { Mutation } from \\"react-apollo\\";
import {
  DeleteRecord
} from \\"./queries.graphql\\"
import {
  DeleteRecord as DeleteRecordType,
  DeleteRecordVariables
} from \\"types\\";

type GetComponentProps<T> = T extends React.Component<infer P> ? P : never;
type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;

class DeleteRecordMutationClass extends Mutation<DeleteRecordType, DeleteRecordVariables> {};

export const DeleteRecordMutation = (props: Omit<GetComponentProps<DeleteRecordMutationClass>, \\"mutation\\">) => <DeleteRecordMutationClass mutation={DeleteRecord} {...props} />;"
`;

exports[`generate generates expected output for typescript: Generates a file with GetList query and DeleteItem mutation 1`] = `
"/* Generated using apollo-typed-components */
import * as React from \\"react\\";
import { Query, Mutation, Subscription } from \\"react-apollo\\";
import {
  GetList,
  DeleteItem,
  OnDeleteItem
} from \\"./queries.graphql\\"
import {
  GetList as GetListType,
  GetListVariables,
  DeleteItem as DeleteItemType,
  DeleteItemVariables,
  OnDeleteItem as OnDeleteItemType,
  OnDeleteItemVariables
} from \\"types\\";

type GetComponentProps<T> = T extends React.Component<infer P> ? P : never;
type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;

class GetListQueryClass extends Query<GetListType, GetListVariables> {};
class DeleteItemMutationClass extends Mutation<DeleteItemType, DeleteItemVariables> {};
class OnDeleteItemSubscriptionClass extends Subscription<OnDeleteItemType, OnDeleteItemVariables> {};

export const GetListQuery = (props: Omit<GetComponentProps<GetListQueryClass>, \\"query\\">) => <GetListQueryClass query={GetList} {...props} />;
export const DeleteItemMutation = (props: Omit<GetComponentProps<DeleteItemMutationClass>, \\"mutation\\">) => <DeleteItemMutationClass mutation={DeleteItem} {...props} />;
export const OnDeleteItemSubscription = (props: Omit<GetComponentProps<OnDeleteItemSubscriptionClass>, \\"subscription\\">) => <OnDeleteItemSubscriptionClass subscription={OnDeleteItem} {...props} />;"
`;

exports[`generate generates expected output for typescript: Generates a file with GetRecord query and UpdateRecord mutation 1`] = `
"/* Generated using apollo-typed-components */
import * as React from \\"react\\";
import { Query, Mutation, Subscription } from \\"react-apollo\\";
import {
  GetRecord,
  UpdateRecord,
  OnUpdatedRecord
} from \\"./queries.graphql\\"
import {
  GetRecord as GetRecordType,
  GetRecordVariables,
  UpdateRecord as UpdateRecordType,
  UpdateRecordVariables,
  OnUpdatedRecord as OnUpdatedRecordType,
  OnUpdatedRecordVariables
} from \\"types\\";

type GetComponentProps<T> = T extends React.Component<infer P> ? P : never;
type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;

class GetRecordQueryClass extends Query<GetRecordType, GetRecordVariables> {};
class UpdateRecordMutationClass extends Mutation<UpdateRecordType, UpdateRecordVariables> {};
class OnUpdatedRecordSubscriptionClass extends Subscription<OnUpdatedRecordType, OnUpdatedRecordVariables> {};

export const GetRecordQuery = (props: Omit<GetComponentProps<GetRecordQueryClass>, \\"query\\">) => <GetRecordQueryClass query={GetRecord} {...props} />;
export const UpdateRecordMutation = (props: Omit<GetComponentProps<UpdateRecordMutationClass>, \\"mutation\\">) => <UpdateRecordMutationClass mutation={UpdateRecord} {...props} />;
export const OnUpdatedRecordSubscription = (props: Omit<GetComponentProps<OnUpdatedRecordSubscriptionClass>, \\"subscription\\">) => <OnUpdatedRecordSubscriptionClass subscription={OnUpdatedRecord} {...props} />;"
`;

exports[`generate generates expected output for typescript: Generates a file with GetViewer query 1`] = `
"/* Generated using apollo-typed-components */
import * as React from \\"react\\";
import { Query } from \\"react-apollo\\";
import {
  GetViewer
} from \\"./queries.graphql\\"
import {
  GetViewer as GetViewerType
} from \\"types\\";

type GetComponentProps<T> = T extends React.Component<infer P> ? P : never;
type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;

class GetViewerQueryClass extends Query<GetViewerType, {}> {};

export const GetViewerQuery = (props: Omit<GetComponentProps<GetViewerQueryClass>, \\"query\\">) => <GetViewerQueryClass query={GetViewer} {...props} />;"
`;
