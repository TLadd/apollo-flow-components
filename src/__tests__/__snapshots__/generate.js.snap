// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate generates expected output for typescript: Generates a file with DeleteRecord mutation 1`] = `
"/* Generated using apollo-typed-components */
import * as React from \\"react\\";
import {
  Mutation,
  useMutation,
  MutationComponentOptions,
  MutationHookOptions
} from \\"react-apollo\\";
import {
  DeleteRecord
} from \\"./queries.graphql\\"
import {
  DeleteRecord as DeleteRecordType,
  DeleteRecordVariables
} from \\"types\\";

export const DeleteRecordMutation = (props: Omit<MutationComponentOptions<DeleteRecordType, DeleteRecordVariables>, \\"mutation\\">) => {
  return <Mutation<DeleteRecordType, DeleteRecordVariables> mutation={DeleteRecord} {...props} />;
}

export const useDeleteRecordMutation = (options?: MutationHookOptions<DeleteRecordType, DeleteRecordVariables>) => {
  return useMutation<DeleteRecordType, DeleteRecordVariables>(DeleteRecord, options);
}"
`;

exports[`generate generates expected output for typescript: Generates a file with GetList query and DeleteItem mutation 1`] = `
"/* Generated using apollo-typed-components */
import * as React from \\"react\\";
import {
  Query,
  useQuery,
  QueryComponentOptions,
  QueryHookOptions,
  Mutation,
  useMutation,
  MutationComponentOptions,
  MutationHookOptions,
  Subscription,
  useSubscription,
  SubscriptionComponentOptions,
  SubscriptionHookOptions
} from \\"react-apollo\\";
import {
  GetList,
  DeleteItem,
  OnDeleteItem
} from \\"./queries.graphql\\"
import {
  GetList as GetListType,
  GetListVariables,
  DeleteItem as DeleteItemType,
  DeleteItemVariables,
  OnDeleteItem as OnDeleteItemType,
  OnDeleteItemVariables
} from \\"types\\";

export const GetListQuery = (props: Omit<QueryComponentOptions<GetListType, GetListVariables>, \\"query\\">) => {
  return <Query<GetListType, GetListVariables> query={GetList} {...props} />;
}
export const DeleteItemMutation = (props: Omit<MutationComponentOptions<DeleteItemType, DeleteItemVariables>, \\"mutation\\">) => {
  return <Mutation<DeleteItemType, DeleteItemVariables> mutation={DeleteItem} {...props} />;
}
export const OnDeleteItemSubscription = (props: Omit<SubscriptionComponentOptions<OnDeleteItemType, OnDeleteItemVariables>, \\"subscription\\">) => {
  return <Subscription<OnDeleteItemType, OnDeleteItemVariables> subscription={OnDeleteItem} {...props} />;
}

export const useGetListQuery = (options?: QueryHookOptions<GetListType, GetListVariables>) => {
  return useQuery<GetListType, GetListVariables>(GetList, options);
}
export const useDeleteItemMutation = (options?: MutationHookOptions<DeleteItemType, DeleteItemVariables>) => {
  return useMutation<DeleteItemType, DeleteItemVariables>(DeleteItem, options);
}
export const useOnDeleteItemSubscription = (options?: SubscriptionHookOptions<OnDeleteItemType, OnDeleteItemVariables>) => {
  return useSubscription<OnDeleteItemType, OnDeleteItemVariables>(OnDeleteItem, options);
}"
`;

exports[`generate generates expected output for typescript: Generates a file with GetRecord query and UpdateRecord mutation 1`] = `
"/* Generated using apollo-typed-components */
import * as React from \\"react\\";
import {
  Query,
  useQuery,
  QueryComponentOptions,
  QueryHookOptions,
  Mutation,
  useMutation,
  MutationComponentOptions,
  MutationHookOptions,
  Subscription,
  useSubscription,
  SubscriptionComponentOptions,
  SubscriptionHookOptions
} from \\"react-apollo\\";
import {
  GetRecord,
  UpdateRecord,
  OnUpdatedRecord
} from \\"./queries.graphql\\"
import {
  GetRecord as GetRecordType,
  GetRecordVariables,
  UpdateRecord as UpdateRecordType,
  UpdateRecordVariables,
  OnUpdatedRecord as OnUpdatedRecordType,
  OnUpdatedRecordVariables
} from \\"types\\";

export const GetRecordQuery = (props: Omit<QueryComponentOptions<GetRecordType, GetRecordVariables>, \\"query\\">) => {
  return <Query<GetRecordType, GetRecordVariables> query={GetRecord} {...props} />;
}
export const UpdateRecordMutation = (props: Omit<MutationComponentOptions<UpdateRecordType, UpdateRecordVariables>, \\"mutation\\">) => {
  return <Mutation<UpdateRecordType, UpdateRecordVariables> mutation={UpdateRecord} {...props} />;
}
export const OnUpdatedRecordSubscription = (props: Omit<SubscriptionComponentOptions<OnUpdatedRecordType, OnUpdatedRecordVariables>, \\"subscription\\">) => {
  return <Subscription<OnUpdatedRecordType, OnUpdatedRecordVariables> subscription={OnUpdatedRecord} {...props} />;
}

export const useGetRecordQuery = (options?: QueryHookOptions<GetRecordType, GetRecordVariables>) => {
  return useQuery<GetRecordType, GetRecordVariables>(GetRecord, options);
}
export const useUpdateRecordMutation = (options?: MutationHookOptions<UpdateRecordType, UpdateRecordVariables>) => {
  return useMutation<UpdateRecordType, UpdateRecordVariables>(UpdateRecord, options);
}
export const useOnUpdatedRecordSubscription = (options?: SubscriptionHookOptions<OnUpdatedRecordType, OnUpdatedRecordVariables>) => {
  return useSubscription<OnUpdatedRecordType, OnUpdatedRecordVariables>(OnUpdatedRecord, options);
}"
`;

exports[`generate generates expected output for typescript: Generates a file with GetViewer query 1`] = `
"/* Generated using apollo-typed-components */
import * as React from \\"react\\";
import {
  Query,
  useQuery,
  QueryComponentOptions,
  QueryHookOptions
} from \\"react-apollo\\";
import {
  GetViewer
} from \\"./queries.graphql\\"
import {
  GetViewer as GetViewerType
} from \\"types\\";

export const GetViewerQuery = (props: Omit<QueryComponentOptions<GetViewerType>, \\"query\\">) => {
  return <Query<GetViewerType> query={GetViewer} {...props} />;
}

export const useGetViewerQuery = (options?: QueryHookOptions<GetViewerType>) => {
  return useQuery<GetViewerType>(GetViewer, options);
}"
`;
